---
export interface Props {
	password: string;
	encryptedContent: string;
}

const { password, encryptedContent } = Astro.props;
---

<div class="password-protect-container">
	<div class="password-input-wrapper flex flex-col items-center justify-center min-h-[300px] p-8 rounded-xl bg-[var(--card-bg)] border border-[var(--line-divider)]">
		<div class="mb-6 text-center">
			<div class="text-2xl font-bold mb-2 text-[var(--primary)]">🔒</div>
			<h3 class="text-lg font-semibold mb-2">此文章受密码保护</h3>
			<p class="text-sm text-[var(--meta-divider)] mb-4">请输入密码以查看完整内容</p>
		</div>
		
		<div class="flex gap-3 w-full max-w-md">
			<input
				id="password-input"
				class="flex-1 rounded-lg border border-[var(--line-divider)] bg-[var(--card-bg)] p-3 text-[var(--primary)] placeholder:italic placeholder:text-[var(--meta-divider)] focus:border-[var(--primary)] focus:outline-none transition-colors"
				placeholder="请输入密码..."
				type="password"
				autocomplete="off"
				autofocus
			/>
			<button
				id="password-submit-btn"
				class="px-6 py-3 bg-[var(--primary)] text-white rounded-lg hover:bg-[var(--primary)]/80 focus:outline-none focus:ring-2 focus:ring-[var(--primary)]/50 transition-all active:scale-95"
			>
				解锁
			</button>
		</div>
		
		<div id="password-error" class="mt-3 text-sm text-red-500 hidden">
			密码错误，请重试
		</div>
	</div>
	
	<!-- 隐藏的加密内容 -->
	<meta name="encrypted-content" content={encryptedContent} />
</div>

<script is:inline data-astro-rerun>
	async function decrypt(data, key) {
		key = key.padEnd(16, "0");

		const decoder = new TextDecoder();
		const dataBuffer = new Uint8Array(
			atob(data)
				.split("")
				.map(c => c.charCodeAt(0))
		);
		const keyBuffer = new TextEncoder().encode(key);

		const cryptoKey = await crypto.subtle.importKey(
			"raw",
			keyBuffer,
			{ name: "AES-CBC", length: 256 },
			false,
			["decrypt"]
		);

		const iv = dataBuffer.slice(0, 16);
		const encryptedData = dataBuffer.slice(16);

		const decryptedData = await crypto.subtle.decrypt(
			{ name: "AES-CBC", iv },
			cryptoKey,
			encryptedData
		);

		return decoder.decode(decryptedData);
	}

	function setupPasswordUnlock() {
		const encryptedContent = document
			.querySelector("meta[name=encrypted-content]")
			?.getAttribute("content");
		
		if (!encryptedContent) return;

		const input = document.getElementById("password-input");
		const btn = document.getElementById("password-submit-btn");
		const errorDiv = document.getElementById("password-error");
		const container = document.querySelector(".password-protect-container");

		const handleSubmit = async () => {
			if (!input) return;
			
			const password = input.value.trim();
			if (!password) return;

			try {
				errorDiv?.classList.add("hidden");
				btn.textContent = "解锁中...";
				btn.disabled = true;

				const html = await decrypt(encryptedContent, password);
				
				// 替换整个容器内容
				if (container) {
					container.innerHTML = html;
					
					// 重新执行可能存在的脚本
					const scripts = container.querySelectorAll("script");
					scripts.forEach(oldScript => {
						const newScript = document.createElement("script");
						Array.from(oldScript.attributes).forEach(attr => 
							newScript.setAttribute(attr.name, attr.value)
						);
						newScript.appendChild(document.createTextNode(oldScript.innerHTML));
						oldScript.parentNode?.replaceChild(newScript, oldScript);
					});
				}
			} catch (e) {
				console.error("解密失败:", e);
				errorDiv?.classList.remove("hidden");
				btn.textContent = "解锁";
				btn.disabled = false;
			}
		};

		btn?.addEventListener("click", handleSubmit);
		input?.addEventListener("keypress", (e) => {
			if (e.key === "Enter") {
				handleSubmit();
			}
		});
	}

	// 页面加载时执行
	setupPasswordUnlock();
	
	// Astro 页面切换时重新执行
	document.addEventListener("astro:after-swap", setupPasswordUnlock);
</script>
