---
import { Icon } from "astro-icon/components";
import { i18n } from "../i18n/translation";
import Key from "../i18n/i18nKey";

export interface Props {
	password: string;
	encryptedContent: string;
}

const { password, encryptedContent } = Astro.props;
---

<div class="password-protect-container">
	<div class="password-input-wrapper flex flex-col items-center justify-center min-h-[300px] p-8 rounded-xl bg-[var(--card-bg)] border border-[var(--line-divider)] shadow-sm">
		<div class="mb-8 text-center">
			<div class="text-4xl font-bold mb-3 text-[var(--primary)] transform transition-all">				<Icon name="material-symbols:lock-outline" class="inline-block hover:rotate-12 text-4xl" />
			</div>
			<h3 class="text-xl font-semibold mb-2">{i18n(Key.passwordProtected)}</h3>
			<p class="text-sm text-[var(--meta-divider)] mb-4">{i18n(Key.passwordHint)}</p>
		</div>
		
		<div class="flex flex-col sm:flex-row gap-3 w-full max-w-md relative group">
			<input
				id="password-input"
				class="flex-1 rounded-lg border-2 border-[var(--line-divider)] bg-[var(--card-bg)] p-3 text-[var(--primary)] placeholder:italic placeholder:text-[var(--meta-divider)] focus:border-[var(--primary)] focus:outline-none transition-all duration-300 shadow-sm focus:shadow-md"
				placeholder={i18n(Key.passwordPlaceholder)}
				type="password"
				autocomplete="off"
				autofocus
			/>
			<button
				id="password-submit-btn"
				class="px-6 py-3 bg-[var(--primary)] text-white rounded-lg hover:bg-[var(--primary)]/90 focus:outline-none focus:ring-2 focus:ring-[var(--primary)]/50 transition-all duration-300 active:scale-95 shadow-sm hover:shadow-md sm:w-auto w-full"
			>
				{i18n(Key.unlockButton)}
			</button>
		</div>
		
		<div id="password-error" class="mt-4 px-4 py-2 text-sm text-red-500 bg-red-50 dark:bg-red-900/20 rounded-md hidden">
			<span class="flex items-center gap-1">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline">
					<circle cx="12" cy="12" r="10"></circle>
					<line x1="12" y1="8" x2="12" y2="12"></line>
					<line x1="12" y1="16" x2="12.01" y2="16"></line>
				</svg>
				{i18n(Key.passwordIncorrect)}
			</span>
		</div>
	</div>
	
	<!-- 隐藏的加密内容 -->
	<meta name="encrypted-content" content={encryptedContent} />
	
	<!-- 隐藏的i18n文本，供JavaScript使用 -->
	<span id="password-success-text" class="hidden">{i18n(Key.passwordSuccess)}</span>
	<span id="password-retry-text" class="hidden">{i18n(Key.passwordRetry)}</span>
</div>

<script is:inline data-astro-rerun>	// 存储方式：URL -> [密码1, 密码2, ...]
	// 我们不再需要哈希函数，直接使用密码，但添加缓存管理功能
	
	// 清理过期的密码缓存
	function cleanExpiredPasswords() {
		try {
			// 从 localStorage 中获取最后清理时间
			const lastCleanTime = parseInt(localStorage.getItem('fuwari-last-clean') || '0');
			const now = Date.now();
			
			// 每天只清理一次
			const ONE_DAY = 24 * 60 * 60 * 1000;
			if (now - lastCleanTime > ONE_DAY) {
				// 设置过期时间为1天
				const EXPIRE_TIME = 1 * ONE_DAY;
				const expireTimestamp = now - EXPIRE_TIME;
				
				// 遍历所有密码存储
				for (let i = 0; i < localStorage.length; i++) {
					const key = localStorage.key(i);
					if (key && key.startsWith('fuwari-article-')) {
						// 获取该文章密码的最后访问时间
						const lastAccessKey = key.replace('fuwari-article-', 'fuwari-last-access-');
						const lastAccess = parseInt(localStorage.getItem(lastAccessKey) || '0');
						
						// 如果超过过期时间，删除该密码
						if (lastAccess < expireTimestamp) {
							localStorage.removeItem(key);
							localStorage.removeItem(lastAccessKey);
						}
					}
				}
				
				// 更新最后清理时间
				localStorage.setItem('fuwari-last-clean', now.toString());
			}
		} catch (e) {
			// 清理过程中的错误不应影响正常功能
			console.warn('清理过期密码缓存失败', e);
		}
	}
	
	async function decrypt(data, key) {
		key = key.padEnd(16, "0");

		const decoder = new TextDecoder();
		const dataBuffer = new Uint8Array(
			atob(data)
				.split("")
				.map(c => c.charCodeAt(0))
		);
		const keyBuffer = new TextEncoder().encode(key);

		const cryptoKey = await crypto.subtle.importKey(
			"raw",
			keyBuffer,
			{ name: "AES-CBC", length: 256 },
			false,
			["decrypt"]
		);

		const iv = dataBuffer.slice(0, 16);
		const encryptedData = dataBuffer.slice(16);

		const decryptedData = await crypto.subtle.decrypt(
			{ name: "AES-CBC", iv },
			cryptoKey,
			encryptedData
		);

		return decoder.decode(decryptedData);
	}	// 尝试自动解锁文章
	async function tryAutoUnlock(encryptedContent, container) {
		try {
			// 获取当前文章URL作为唯一标识
			const url = window.location.pathname;
			
			// 检查是否有该URL对应的密码存储
			const storedPasswords = localStorage.getItem(`fuwari-article-${url}`);
			if (storedPasswords) {
				try {
					// 解析存储的密码列表
					const passwords = JSON.parse(storedPasswords);
					
					// 尝试每一个保存的密码
					for (const pwd of passwords) {
						try {
							// 尝试解密
							const html = await decrypt(encryptedContent, pwd);
									// 解密成功，替换内容
							container.innerHTML = html;
							
							// 更新最后访问时间
							const lastAccessKey = `fuwari-last-access-${url}`;
							localStorage.setItem(lastAccessKey, Date.now().toString());
							
							// 重新执行可能存在的脚本
							const scripts = container.querySelectorAll("script");
							scripts.forEach(oldScript => {
								const newScript = document.createElement("script");
								Array.from(oldScript.attributes).forEach(attr => 
									newScript.setAttribute(attr.name, attr.value)
								);
								newScript.appendChild(document.createTextNode(oldScript.innerHTML));
								oldScript.parentNode?.replaceChild(newScript, oldScript);
							});
							
							return true; // 自动解锁成功
						} catch (e) {
							// 这个密码失败，尝试下一个
							continue;
						}
					}
				} catch (e) {
					// JSON解析失败，忽略
					console.warn('解析存储的密码时出错', e);
				}
			}
		} catch (e) {
			console.warn('自动解锁尝试失败', e);
		}
		
		return false; // 没有找到匹配的密码
	}
		function setupPasswordUnlock() {
		// 清理过期密码
		cleanExpiredPasswords();
		
		const encryptedContent = document
			.querySelector("meta[name=encrypted-content]")
			?.getAttribute("content");
		
		if (!encryptedContent) return;

		const input = document.getElementById("password-input");
		const btn = document.getElementById("password-submit-btn");
		const errorDiv = document.getElementById("password-error");
		const container = document.querySelector(".password-protect-container");
		
		// 尝试自动解锁
		tryAutoUnlock(encryptedContent, container).then(success => {
			// 如果自动解锁失败，才显示密码输入界面
			// 自动解锁成功的话，容器内容已经被替换为解密后的内容
		});
		
		// 创建加载动画
		const createLoadingSpinner = () => {
			const spinnerHTML = `
				<svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
			`;
			const spinnerContainer = document.createElement('div');
			spinnerContainer.innerHTML = spinnerHTML;
			return spinnerContainer.firstElementChild;
		};
		
		// 添加输入动画效果
		if (input) {
			input.addEventListener('focus', () => {
				input.classList.add('border-[var(--primary)]', 'shadow-md');
			});
			
			input.addEventListener('blur', () => {
				if (!input.value.trim()) {
					input.classList.remove('border-[var(--primary)]', 'shadow-md');
				}
			});
		}

		const handleSubmit = async () => {
			if (!input) return;
			
			const password = input.value.trim();
			if (!password) {
				// 如果没有输入密码，添加一个轻微抖动效果
				input.classList.add('animate-shake');
				setTimeout(() => input.classList.remove('animate-shake'), 500);
				return;
			}

			try {
				errorDiv?.classList.add("hidden");
				
				// 保存原始按钮文本并添加加载动画
				const originalBtnText = btn.textContent;
				btn.innerHTML = "";
				btn.appendChild(createLoadingSpinner());
				btn.disabled = true;
				input.disabled = true;
				input.classList.add('opacity-50');
				
				// 添加一个短暂的延迟，提供更好的视觉反馈
				await new Promise(resolve => setTimeout(resolve, 500));
						const html = await decrypt(encryptedContent, password);
						// 将密码存储到 localStorage 中
				try {
					const url = window.location.pathname;
					const storageKey = `fuwari-article-${url}`;
					
					// 检查是否已有该文章的密码存储
					let passwords = [];
					const existingPasswords = localStorage.getItem(storageKey);
					if (existingPasswords) {
						try {
							passwords = JSON.parse(existingPasswords);
							// 确保是数组
							if (!Array.isArray(passwords)) passwords = [];
						} catch (e) {
							// 解析失败，使用空数组
							passwords = [];
						}
					}
					
					// 避免重复存储同一个密码
					if (!passwords.includes(password)) {
						// 最多只保存5个密码，防止过多存储
						if (passwords.length >= 5) {
							passwords.pop(); // 移除最老的密码
						}
						passwords.unshift(password); // 将新密码添加到开头
					}
							// 保存回localStorage
					localStorage.setItem(storageKey, JSON.stringify(passwords));
					
					// 更新最后访问时间
					const lastAccessKey = `fuwari-last-access-${url}`;
					localStorage.setItem(lastAccessKey, Date.now().toString());
				} catch (e) {
					// 如果存储失败，不影响正常解锁
					console.warn('无法保存密码状态', e);
				}
				
				// 显示解锁成功的状态
				btn.innerHTML = "";
				// 获取成功文本（在页面上下文中不能直接使用i18n函数）
				const successText = document.getElementById("password-success-text")?.textContent || "✓ Success";
				btn.textContent = successText;
				btn.classList.remove('bg-[var(--primary)]');
				btn.classList.add('bg-green-500');
				
				// 短暂延迟后替换内容
				setTimeout(() => {
					// 替换整个容器内容
					if (container) {
						// 添加淡入效果
						container.style.opacity = '0';
						setTimeout(() => {
							container.innerHTML = html;
							container.style.opacity = '1';
							container.style.transition = 'opacity 0.3s ease-in-out';
							
							// 重新执行可能存在的脚本
							const scripts = container.querySelectorAll("script");
							scripts.forEach(oldScript => {
								const newScript = document.createElement("script");
								Array.from(oldScript.attributes).forEach(attr => 
									newScript.setAttribute(attr.name, attr.value)
								);
								newScript.appendChild(document.createTextNode(oldScript.innerHTML));
								oldScript.parentNode?.replaceChild(newScript, oldScript);
							});
						}, 300);
					}
				}, 500);
				
			} catch (e) {
				console.error("解密失败:", e);
				errorDiv?.classList.remove("hidden");
				// 获取重试文本
				const retryText = document.getElementById("password-retry-text")?.textContent || "Retry";
				btn.textContent = retryText;
				btn.disabled = false;
				input.disabled = false;
				input.classList.remove('opacity-50');
				input.focus();
				
				// 抖动效果
				errorDiv?.classList.add('animate-shake');
				setTimeout(() => errorDiv?.classList.remove('animate-shake'), 500);
			}
		};

		btn?.addEventListener("click", handleSubmit);
		input?.addEventListener("keypress", (e) => {
			if (e.key === "Enter") {
				handleSubmit();
			}
		});
	}

	// 页面加载时执行
	setupPasswordUnlock();
	
	// Astro 页面切换时重新执行
	document.addEventListener("astro:after-swap", setupPasswordUnlock);
</script>
