---
import { Icon } from "astro-icon/components";

export interface Props {
	password: string;
	encryptedContent: string;
}

const { password, encryptedContent } = Astro.props;
---

<div class="password-protect-container">
	<div class="password-input-wrapper flex flex-col items-center justify-center min-h-[300px] p-8 rounded-xl bg-[var(--card-bg)] border border-[var(--line-divider)] shadow-sm">
		<div class="mb-8 text-center">
			<div class="text-4xl font-bold mb-3 text-[var(--primary)] transform transition-all">				<Icon name="material-symbols:lock-outline" class="inline-block hover:rotate-12 text-4xl" />
			</div>
			<h3 class="text-xl font-semibold mb-2">此文章受密码保护</h3>
			<p class="text-sm text-[var(--meta-divider)] mb-4">请输入密码以查看完整内容</p>
		</div>
		
		<div class="flex gap-3 w-full max-w-md relative group">
			<input
				id="password-input"
				class="flex-1 rounded-lg border-2 border-[var(--line-divider)] bg-[var(--card-bg)] p-3 text-[var(--primary)] placeholder:italic placeholder:text-[var(--meta-divider)] focus:border-[var(--primary)] focus:outline-none transition-all duration-300 shadow-sm focus:shadow-md"
				placeholder="请输入密码..."
				type="password"
				autocomplete="off"
				autofocus
			/>
			<button
				id="password-submit-btn"
				class="px-6 py-3 bg-[var(--primary)] text-white rounded-lg hover:bg-[var(--primary)]/90 focus:outline-none focus:ring-2 focus:ring-[var(--primary)]/50 transition-all duration-300 active:scale-95 shadow-sm hover:shadow-md"
			>
				解锁
			</button>
		</div>
		
		<div id="password-error" class="mt-4 px-4 py-2 text-sm text-red-500 bg-red-50 dark:bg-red-900/20 rounded-md hidden">
			<span class="flex items-center gap-1">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline">
					<circle cx="12" cy="12" r="10"></circle>
					<line x1="12" y1="8" x2="12" y2="12"></line>
					<line x1="12" y1="16" x2="12.01" y2="16"></line>
				</svg>
				密码错误，请重试
			</span>
		</div>
	</div>
	
	<!-- 隐藏的加密内容 -->
	<meta name="encrypted-content" content={encryptedContent} />
</div>

<script is:inline data-astro-rerun>
	async function decrypt(data, key) {
		key = key.padEnd(16, "0");

		const decoder = new TextDecoder();
		const dataBuffer = new Uint8Array(
			atob(data)
				.split("")
				.map(c => c.charCodeAt(0))
		);
		const keyBuffer = new TextEncoder().encode(key);

		const cryptoKey = await crypto.subtle.importKey(
			"raw",
			keyBuffer,
			{ name: "AES-CBC", length: 256 },
			false,
			["decrypt"]
		);

		const iv = dataBuffer.slice(0, 16);
		const encryptedData = dataBuffer.slice(16);

		const decryptedData = await crypto.subtle.decrypt(
			{ name: "AES-CBC", iv },
			cryptoKey,
			encryptedData
		);

		return decoder.decode(decryptedData);
	}
	function setupPasswordUnlock() {
		const encryptedContent = document
			.querySelector("meta[name=encrypted-content]")
			?.getAttribute("content");
		
		if (!encryptedContent) return;

		const input = document.getElementById("password-input");
		const btn = document.getElementById("password-submit-btn");
		const errorDiv = document.getElementById("password-error");
		const container = document.querySelector(".password-protect-container");
		
		// 创建加载动画
		const createLoadingSpinner = () => {
			const spinnerHTML = `
				<svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
			`;
			const spinnerContainer = document.createElement('div');
			spinnerContainer.innerHTML = spinnerHTML;
			return spinnerContainer.firstElementChild;
		};
		
		// 添加输入动画效果
		if (input) {
			input.addEventListener('focus', () => {
				input.classList.add('border-[var(--primary)]', 'shadow-md');
			});
			
			input.addEventListener('blur', () => {
				if (!input.value.trim()) {
					input.classList.remove('border-[var(--primary)]', 'shadow-md');
				}
			});
		}

		const handleSubmit = async () => {
			if (!input) return;
			
			const password = input.value.trim();
			if (!password) {
				// 如果没有输入密码，添加一个轻微抖动效果
				input.classList.add('animate-shake');
				setTimeout(() => input.classList.remove('animate-shake'), 500);
				return;
			}

			try {
				errorDiv?.classList.add("hidden");
				
				// 保存原始按钮文本并添加加载动画
				const originalBtnText = btn.textContent || "解锁";
				btn.innerHTML = "";
				btn.appendChild(createLoadingSpinner());
				btn.disabled = true;
				input.disabled = true;
				input.classList.add('opacity-50');
				
				// 添加一个短暂的延迟，提供更好的视觉反馈
				await new Promise(resolve => setTimeout(resolve, 500));
				
				const html = await decrypt(encryptedContent, password);
				
				// 显示解锁成功的状态
				btn.innerHTML = "";
				btn.textContent = "✓ 成功";
				btn.classList.remove('bg-[var(--primary)]');
				btn.classList.add('bg-green-500');
				
				// 短暂延迟后替换内容
				setTimeout(() => {
					// 替换整个容器内容
					if (container) {
						// 添加淡入效果
						container.style.opacity = '0';
						setTimeout(() => {
							container.innerHTML = html;
							container.style.opacity = '1';
							container.style.transition = 'opacity 0.3s ease-in-out';
							
							// 重新执行可能存在的脚本
							const scripts = container.querySelectorAll("script");
							scripts.forEach(oldScript => {
								const newScript = document.createElement("script");
								Array.from(oldScript.attributes).forEach(attr => 
									newScript.setAttribute(attr.name, attr.value)
								);
								newScript.appendChild(document.createTextNode(oldScript.innerHTML));
								oldScript.parentNode?.replaceChild(newScript, oldScript);
							});
						}, 300);
					}
				}, 500);
				
			} catch (e) {
				console.error("解密失败:", e);
				errorDiv?.classList.remove("hidden");
				btn.textContent = "重试";
				btn.disabled = false;
				input.disabled = false;
				input.classList.remove('opacity-50');
				input.focus();
				
				// 抖动效果
				errorDiv?.classList.add('animate-shake');
				setTimeout(() => errorDiv?.classList.remove('animate-shake'), 500);
			}
		};

		btn?.addEventListener("click", handleSubmit);
		input?.addEventListener("keypress", (e) => {
			if (e.key === "Enter") {
				handleSubmit();
			}
		});
	}

	// 页面加载时执行
	setupPasswordUnlock();
	
	// Astro 页面切换时重新执行
	document.addEventListener("astro:after-swap", setupPasswordUnlock);
</script>
