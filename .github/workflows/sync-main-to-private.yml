name: 同步 main 分支到 private 分支

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

jobs:
  sync:
    name: 同步分支
    runs-on: ubuntu-latest
    
    # 只在推送者不是 GitHub Actions 时运行，避免无限循环
    if: github.actor != 'github-actions[bot]'
    
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          # 获取完整的 git 历史记录
          fetch-depth: 0
          # 使用 GitHub Token 进行身份验证
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 配置 Git 用户信息
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 获取所有分支
        run: |
          git fetch origin main
          git fetch origin private || echo "private 分支不存在，将会被创建"

      - name: 检查 private 分支是否存在
        id: check_branch
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/private; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 创建 private 分支（如果不存在）
        if: steps.check_branch.outputs.exists == 'false'
        run: |
          echo "创建 private 分支..."
          git checkout -b private
          git push -u origin private
          echo "✅ private 分支已创建"

      - name: 切换到 private 分支并同步
        if: steps.check_branch.outputs.exists == 'true'
        run: |
          echo "切换到 private 分支..."
          git checkout private
          
          echo "检查是否有冲突..."
          # 尝试合并，如果有冲突则手动处理
          if git merge origin/main --no-edit; then
            echo "✅ 自动合并成功"
            # 检查是否有新的提交需要推送
            if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/private)" ]; then
              echo "发现新的提交，准备推送..."
            else
              echo "没有新的更改需要同步"
            fi
          else
            echo "⚠️ 检测到合并冲突，需要手动处理"
            git merge --abort
            
            # 创建冲突通知
            echo "创建冲突通知..."
            
            # 获取冲突信息
            CONFLICT_FILES=$(git diff --name-only origin/main...private 2>/dev/null || echo "无法获取冲突文件列表")
            
            echo "检测到分支同步冲突，需要手动处理"
            echo "冲突时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "触发提交: ${{ github.sha }}"
            echo "可能的冲突文件: $CONFLICT_FILES"
            echo ""
            echo "手动解决步骤:"
            echo "1. git checkout private"
            echo "2. git merge main"
            echo "3. 解决冲突后提交"
            echo "4. git push origin private"
            
            exit 1
          fi

      - name: 推送更改到 private 分支
        run: |
          echo "推送更改到 private 分支..."
          # 检查是否有新的提交需要推送
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/private)" ]; then
            git push origin private
            echo "✅ 同步完成！新的更改已推送到 private 分支"
          else
            echo "✅ 同步完成！没有新的更改需要推送"
          fi

      - name: 生成同步报告
        if: success()
        run: |
          echo "## 📊 同步报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 同步成功" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **源分支**: \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "- **目标分支**: \`private\`" >> $GITHUB_STEP_SUMMARY
          echo "- **触发提交**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **同步时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 最近的提交" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          git log --oneline -5 origin/main >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "🎉 private 分支已成功同步 main 分支的最新更改！"

      - name: 错误处理
        if: failure()
        run: |
          echo "## ❌ 同步失败" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "同步过程中遇到错误，请查看工作流日志了解详细信息。" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 可能的解决方案" >> $GITHUB_STEP_SUMMARY
          echo "1. 检查是否存在合并冲突" >> $GITHUB_STEP_SUMMARY
          echo "2. 手动合并 main 分支到 private 分支" >> $GITHUB_STEP_SUMMARY
          echo "3. 检查仓库权限设置" >> $GITHUB_STEP_SUMMARY
          
          echo "❌ 分支同步失败，请查看日志并手动处理。"
